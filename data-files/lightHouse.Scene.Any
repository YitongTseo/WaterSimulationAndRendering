
/* -*- c++ -*- */
{ 
    entities = { 


		 apple_1 = VisibleEntity { 
           // frame = CFrame::fromXYZYPRDegrees(0, -2.5f, 0, 0, 0, 0 ); 
            model = "lightHouse"; 
			canChange = false;
			
        }; 
        
        camera = Camera { 
            depthOfFieldSettings = DepthOfFieldSettings { 
                enabled = false; 
                farBlurRadiusFraction = 0.01; 
                farBlurryPlaneZ = -120; 
                farSharpPlaneZ = -11; 
                focusPlaneZ = -10; 
                lensRadius = 0.01; 
                model = "ARTIST"; 
                nearBlurRadiusFraction = 0.01; 
                nearBlurryPlaneZ = -0.1; 
                nearSharpPlaneZ = -1; 
            }; 
            
            filmSettings = FilmSettings { 
                antialiasingEnabled = true; 
                antialiasingFilterRadius = 0; 
                antialiasingHighQuality = false; 
                bloomRadiusFraction = 0.009; 
                bloomStrength = 0.1; 
                debugZoom = 1; 
                effectsEnabled = true; 
                gamma = 2.2; 
                sensitivity = 0.6; 
                toneCurve = Spline { 
                    control = ( 0, 0.0787234, 0.306383, 0.808511, 0.925532 ); 
                    extrapolationMode = "LINEAR"; 
                    finalInterval = -1; 
                    interpolationMode = "CUBIC"; 
                    time = ( 0, 0.169565, 0.32174, 0.743478, 1 ); 
                }; 
                
                vignetteBottomStrength = 0.05; 
                vignetteSizeFraction = 0.17; 
                vignetteTopStrength = 0.5; 
            }; 
            
            frame = CFrame::fromXYZYPRDegrees(0.91716, 1.9078, -2.1352, 167.87, -17.189, 0 ); 
            motionBlurSettings = MotionBlurSettings { 
                cameraMotionInfluence = 0.5; 
                enabled = false; 
                exposureFraction = 0.75; 
                maxBlurDiameterFraction = 0.1; 
                numSamples = 15; 
            }; 
            
            projection = Projection { 
                farPlaneZ = -50; 
                fovDegrees = 60; 
                fovDirection = "VERTICAL"; 
                nearPlaneZ = -0.1; 
                pixelOffset = Vector2(0, 0 ); 
            }; 
            
            visualizationScale = 1; 
        }; 
        
        roomlight = Light { 
            attenuation = ( 0.0001, 0, 1 ); 
            bulbPower = Color3(50000 ); 
            canChange = false; 
            castsShadows = true; 
            enabled = true; 
            frame = CFrame::fromXYZYPRDegrees(0, 46.6, 0, -0.000219986, -88.6958, -180 ); 
            nearPlaneZLimit = -30; 
            producesDirectIllumination = true; 
            producesIndirectIllumination = true; 
            shadowMapSize = Vector2int16(4096, 4096 ); 
            spotHalfAngleDegrees = 15; 
            spotSquare = true; 
            type = "SPOT"; 
        }; 
        
        roomlight_0 = Light { 
            attenuation = ( 0.0001, 0, 1 ); 
            bulbPower = Color3(50000 ); 
            canChange = false; 
            castsShadows = true; 
            enabled = true; 
            frame = CFrame::fromXYZYPRDegrees(-32.025, 19.8903, -24.4822, -127.443, -17.7253, -102.903 ); 
            nearPlaneZLimit = -30; 
            producesDirectIllumination = true; 
            producesIndirectIllumination = true; 
            shadowMapSize = Vector2int16(4096, 4096 ); 
            spotHalfAngleDegrees = 15; 
            spotSquare = true; 
            type = "SPOT"; 
        }; 
        
        roomlight_0_0 = Light { 
            attenuation = ( 0.0001, 0, 1 ); 
            bulbPower = Color3(50000 ); 
            canChange = false; 
            castsShadows = true; 
            enabled = true; 
            frame = CFrame::fromXYZYPRDegrees(43.9076, 20.4972, 31.3852, 55.6594, -17.8702, 93.2424 ); 
            nearPlaneZLimit = -30; 
            producesDirectIllumination = true; 
            producesIndirectIllumination = true; 
            shadowMapSize = Vector2int16(4096, 4096 ); 
            spotHalfAngleDegrees = 15; 
            spotSquare = true; 
            type = "SPOT"; 
        };
        
    }; 
    
    lightingEnvironment = LightingEnvironment { 
        ambientOcclusionSettings = AmbientOcclusionSettings { 
            bias = 0.001; 
            blurRadius = 4; 
            blurStepSize = 2; 
            depthPeelSeparationHint = 0.02; 
            edgeSharpness = 1; 
            enabled = false; 
            highQualityBlur = true; 
            intensity = 2; 
            monotonicallyDecreasingBilateralWeights = false; 
            numSamples = 15; 
            packBlurKeys = false; 
            radius = 1; 
            temporalFilterSettings = TemporalFilter::Settings { 
                falloffEndDistance = 0.07; 
                falloffStartDistance = 0.05; 
                hysteresis = 0; 
            }; 
            
            temporallyVarySamples = false; 
            useDepthPeelBuffer = false; 
            useNormalBuffer = true; 
            useNormalsInBlur = true; 
            zStorage = "HALF"; 
        }; 
        
        environmentMap = Texture::Specification { 
            encoding = Texture::Encoding { 
                readMultiplyFirst = 1; 
            }; 
            
            filename = "skybox/bluecloud_*.jpg"; 
        }; 
        
    }; 
    
    models = { 
        lightHouse = ArticulatedModel::Specification { 
            filename = "lighthouse.obj"; 
			scale = 2; 
			/*preprocess = {
                setMaterial(all(),UniversalMaterial::Specification {
                        lambertian = Color3(0.95, 0.35, 0.02);
				});	
            };*/
        }; 
        
        sphereModel = ArticulatedModel::Specification { 
            filename = "low-poly-sphere.obj"; 
            preprocess = { moveCenterToOrigin(); transformGeometry(all(), Matrix4::scale(0.025 ) ) }; 
        }; 

		bunnyModel = ArticulatedModel::Specification { 
            filename = "data-files/bunny.obj";
			preprocess = {
                setMaterial(all(),UniversalMaterial::Specification {
                        lambertian = Color3(0.95, 0.35, 0.02);
				});	
            };
			scale = 10;
        }; 
        
    }; 
    
    name = "lightHouse"; 
} 